// <auto-generated />
using System;
using Board_Game_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Board_Game_API.Migrations
{
    [DbContext(typeof(BoardGameContext))]
    [Migration("20250923154448_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Board_Game_API.Models.Collection", b =>
                {
                    b.Property<int>("CollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CollectionID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Board_Game_API.Models.CollectionGame", b =>
                {
                    b.Property<int>("CollectionGameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionGameID"));

                    b.Property<int>("CollectionID")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int?>("PersonalRating")
                        .HasColumnType("int");

                    b.HasKey("CollectionGameID");

                    b.HasIndex("CollectionID");

                    b.HasIndex("GameID");

                    b.ToTable("CollectionGames");
                });

            modelBuilder.Entity("Board_Game_API.Models.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameID"));

                    b.Property<int?>("AgeMinimum")
                        .HasColumnType("int");

                    b.Property<int?>("AverageSession")
                        .HasColumnType("int");

                    b.Property<int?>("Complexity")
                        .HasColumnType("int");

                    b.Property<string>("GameGenre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCardGame")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompetitive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("int");

                    b.HasKey("GameID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Board_Game_API.Models.PlayParticipant", b =>
                {
                    b.Property<int>("ParticipantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantID"));

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ParticipantID");

                    b.HasIndex("SessionID");

                    b.HasIndex("UserID");

                    b.ToTable("PlayParticipants");
                });

            modelBuilder.Entity("Board_Game_API.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int?>("LengthOfTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("WinnerID")
                        .HasColumnType("int");

                    b.HasKey("SessionID");

                    b.HasIndex("GameID");

                    b.HasIndex("WinnerID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Board_Game_API.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int?>("CollectionID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("CollectionID")
                        .IsUnique()
                        .HasFilter("[CollectionID] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Board_Game_API.Models.CollectionGame", b =>
                {
                    b.HasOne("Board_Game_API.Models.Collection", "Collection")
                        .WithMany("CollectionGames")
                        .HasForeignKey("CollectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Board_Game_API.Models.Game", "Game")
                        .WithMany("CollectionGames")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Board_Game_API.Models.PlayParticipant", b =>
                {
                    b.HasOne("Board_Game_API.Models.Session", "Session")
                        .WithMany("PlayParticipants")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Board_Game_API.Models.User", "User")
                        .WithMany("PlayParticipants")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Board_Game_API.Models.Session", b =>
                {
                    b.HasOne("Board_Game_API.Models.Game", "Game")
                        .WithMany("Sessions")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Board_Game_API.Models.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Board_Game_API.Models.User", b =>
                {
                    b.HasOne("Board_Game_API.Models.Collection", "Collection")
                        .WithOne("User")
                        .HasForeignKey("Board_Game_API.Models.User", "CollectionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Board_Game_API.Models.Collection", b =>
                {
                    b.Navigation("CollectionGames");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Board_Game_API.Models.Game", b =>
                {
                    b.Navigation("CollectionGames");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Board_Game_API.Models.Session", b =>
                {
                    b.Navigation("PlayParticipants");
                });

            modelBuilder.Entity("Board_Game_API.Models.User", b =>
                {
                    b.Navigation("PlayParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
